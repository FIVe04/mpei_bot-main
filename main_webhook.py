import telebot
from data import DbHelper
import datetime
import time
import config
import flask
import sys
from valid_functions import *
import telegram

try:
    public_url = sys.argv[1]
except Exception as e:
    public_url = ''
    print('You did not enter the ngrok public url')
    raise e

API_TOKEN = config.TOKEN
APP_HOST = '127.0.0.1'
APP_PORT = '8444'
WEB_HOOK_URL = public_url

TOKEN = config.TOKEN


bot = telebot.TeleBot(TOKEN)
app = flask.Flask(__name__)


back = telebot.types.InlineKeyboardMarkup()
back.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))

VALID_ARR = [chr(i) for i in range(1072, 1104)] + [chr(i) for i in range(1040, 1072)]


@bot.message_handler(commands=['start'])
def start_command(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ú–≠–ò, –ø–æ–º–æ–≥—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ.')
    if not db.person_in_db(message.chat.id):
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ')
        bot.register_next_step_handler(message, add_name)
    else:
        help_command(message)


def add_name(message):
    name = message.text
    answer = check_valid_str(name)
    if answer is True:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é: ')
        bot.register_next_step_handler(message, add_surname, name)
    else:
        bot.send_message(message.chat.id, answer)
        bot.register_next_step_handler(message, add_name)


def add_surname(message, name):
    surname = message.text
    answer = check_valid_str(surname)
    if answer is True:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —É—á–µ–±–Ω–æ–π –≥—Ä—É–ø–ø—ã: ')
        bot.register_next_step_handler(message, add_group_number, name, surname)
    else:
        bot.send_message(message.chat.id, answer)
        bot.register_next_step_handler(message, add_surname, name)


def add_group_number(message, name, surname):
    group_num = message.text
    answer = check_group_number(group_num)
    if answer is True:
        group_num = message.text
        db.add_person(message.chat.id, name, surname, group_num)
        help_command(message)
    else:
        bot.send_message(message.chat.id, answer)


@bot.message_handler(commands=['help'])
def help_command(message):
    bot.clear_step_handler(message)
    keyboard = telebot.types.InlineKeyboardMarkup()
    if db.if_admin(message.chat.id):
        keyboard.add(telebot.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='new_event'))
        keyboard.add(telebot.types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='add_admin'))
        keyboard.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫—Ç–æ –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ',
                                                        callback_data='show_guests'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –∞—Ä–µ–Ω–¥—ã –ø–ª–æ—â–∞–¥–∫–∏', callback_data='show_rules'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='registration_event'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–ª–∏–∂–∞–π—à–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data='show_events'))
    keyboard.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data='show_my_registrations'))
    keyboard.add(telebot.types.InlineKeyboardButton('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', callback_data='unsubscribe'))
    keyboard.add(telebot.types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', callback_data='del_event'))
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: ', reply_markup=keyboard)


def show_rules(message):
    bot.edit_message_text('–ü—Ä–∞–≤–∏–ª–∞ –∞—Ä–µ–Ω–¥—ã:\n'
                          '1) –ù–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –¥–æ–ª–∂–Ω—ã —Å–æ–±–ª—é–¥–∞—Ç—å—Å—è –Ω–æ—Ä–º—ã —ç—Ç–∏–∫–∏ –∏ –º–æ—Ä–∞–ª–∏.\n'
                          '2) –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n'
                          '3) –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.\n'
                          '4) –ü–ª–æ—â–∞–¥–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–µ–π –ú–≠–ò, –ø–æ—ç—Ç–æ–º—É –¥–æ–ª–∂–Ω—ã '
                          '—Å–æ–±–ª—é–¥–∞—Ç—å—Å—è –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è.\n'
                          '5) –ï—Å–ª–∏ —Å–ø–∏–∫–µ—Ä –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–æ–ø—É—Å–∫ –Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é –ú–≠–ò, –Ω—É–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ª—É–∂–µ–±–Ω—É—é –∑–∞–ø–∏—Å–∫—É, '
                          '—á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –∑–∞–π—Ç–∏ –Ω–∞ –ø–ª–æ—â–∞–¥–∫—É.\n'
                          '6) –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π –∑–∞ –ø–ª–æ—â–∞–¥–∫—É –í–ª–∞—Å–æ–≤ –í—è—á–µ—Å–ª–∞–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á. '
                          '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –∞—Ä–µ–Ω–¥–æ–π –ø–ª–æ—â–∞–¥–∫–∏ –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –Ω–µ–º—É.'
                          , message.chat.id, message.message_id, reply_markup=back)


def add_admin(message):
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, –¥–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞. \n'
                                      '1) –î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É @mpei_registration_event_bot —á–µ–ª–æ–≤–µ–∫—É\n'
                                      '–ï—Å–ª–∏ –∑–∞–π—Ç–∏ –Ω–∞ –Ω–µ—ë –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º, —Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç —Å–æ –º–Ω–æ–π) '
                                      '–ù—É–∂–Ω–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start \n'
                                      '2) –ü–µ—Ä–µ—à–ª–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —ç—Ç–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, —á—Ç–æ–±—ã —è –º–æ–≥ –æ—Ç–∫—Ä—ã—Ç—å '
                                      '–µ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∞', reply_markup=back)
    bot.register_next_step_handler(message, add_admin_in_db)


def add_admin_in_db(message):
    try:
        # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏
        if not message.forward_from:
            tg_id = int(message.text)
            if db.if_admin(tg_id):
                bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∞.", reply_markup=back)
            else:
                db.add_admin(tg_id)
                bot.send_message(message.chat.id, f"–ß–µ–ª–æ–≤–µ–∫ —Å –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º {tg_id}"
                                                  f" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω(a) –≤ —Å–∏—Å—Ç–µ–º—É! ü•≥", reply_markup=back)
                key = telebot.types.InlineKeyboardMarkup()
                key.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', callback_data='help'))
                bot.send_message(tg_id, f"{message.from_user.first_name} "
                                        f"{message.from_user.last_name} –¥–æ–±–∞–≤–∏–ª(–∞) "
                                        f"–≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∞. ",
                                 reply_markup=key)
        elif db.if_admin(message.forward_from.id):
            bot.send_message(message.chat.id, "–≠—Ç–æ—Ç —á–µ–ª–æ–≤–µ–∫ —É–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –∞–¥–º–∏–Ω–∞.", reply_markup=back)
        else:
            db.add_admin(message.forward_from.id)
            bot.send_message(message.chat.id, f"{message.forward_from.first_name} {message.forward_from.last_name}"
                                              f" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω(a) –≤ —Å–∏—Å—Ç–µ–º—É! ü•≥", reply_markup=back)
            key = telebot.types.InlineKeyboardMarkup()
            key.add(telebot.types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', callback_data='help'))
            bot.send_message(message.forward_from.id, f"{message.from_user.first_name} "
                                                      f"{message.from_user.last_name} –¥–æ–±–∞–≤–∏–ª(–∞) "
                                                      f"–≤–∞—Å –≤ —Å–∏—Å—Ç–µ–º—É. –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∞–¥–º–∏–Ω–∞. ",
                             reply_markup=key)
    except (ValueError, TypeError, AttributeError):
        bot.send_message(message.chat.id, "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. "
                                          "–ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Ç–æ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –æ—Ç —á–µ–ª–æ–≤–µ–∫–∞, "
                                          "—Ç–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–±:\n"
                                          "1) O—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É @mpei_registration_event_bot —á–µ–ª–æ–≤–µ–∫—É\n"
                                          "–ï—Å–ª–∏ –∑–∞–π—Ç–∏ –Ω–∞ –Ω–µ—ë –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¢–µ–ª–µ–≥—Ä–∞–º, —Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —á–∞—Ç —Å–æ –º–Ω–æ–π) "
                                          "–ù—É–∂–Ω–æ, —á—Ç–æ–±—ã —á–µ–ª–æ–≤–µ–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start \n"
                                          "2) –ü—É—Å—Ç—å —á–µ–ª–æ–≤–µ–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–≤–æ–π –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ. "
                                          "–ù–∞–π—Ç–∏ –µ–≥–æ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ. –ù—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @getmyid_bot –∏ –æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç "
                                          "–≤–∞–º –≤–∞—à –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä.\n "
                                          "3) –ù—É –∞ —Ç–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –∏–¥–µ–Ω—Ç–µ—Ñ–∏–∫–∞—Ç–æ—Ä –º–Ω–µ",
                         reply_markup=back)
        bot.register_next_step_handler(message, add_admin_in_db)


def new_event(message):
    bot.edit_message_text('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: ', message.chat.id, message.message_id, reply_markup=back)
    bot.register_next_step_handler(message, event_name)


def event_name(message):
    name = message.text
    answer = check_mero_name(name)
    if answer is True:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ',
                         reply_markup=back)
        bot.register_next_step_handler(message, event_count, name)
    else:
        bot.send_message(message.chat.id, answer, reply_markup=back)
        bot.register_next_step_handler(message, event_name)


def event_count(message, name):
    try:
        count = int(message.text)
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ ', reply_markup=back)
        bot.register_next_step_handler(message, event_day, name, count)
    except ValueError:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ',
                         reply_markup=back)
        bot.register_next_step_handler(message, event_count, name)


def event_day(message, name, count):
    day = message.text
    answer, date_or_message = check_date(day)
    if answer is True:
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á—á:–º–º ', reply_markup=back)
        bot.register_next_step_handler(message, event_time, name, count, date_or_message)
    else:
        bot.send_message(message.chat.id, date_or_message, reply_markup=back)
        bot.register_next_step_handler(message, event_day, name, count)


def event_time(message, name, count, day):
    mero_time = message.text
    answer, time_or_message = check_time(mero_time)
    if answer is True:
        if check_date_and_time(day, mero_time):
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –≤ –º–∏–Ω—É—Ç–∞—Ö ', reply_markup=back)
            bot.register_next_step_handler(message, event_duration, name, count, day, mero_time)
        else:
            bot.send_message(message.chat.id, '–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–∞ –≤–≤–µ–¥—ë–Ω–Ω—É—é –¥–∞—Ç—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.  ',
                             reply_markup=back)
    else:
        bot.send_message(message.chat.id, time_or_message, reply_markup=back)
        bot.register_next_step_handler(message, event_time, name, count, day)


def event_duration(message, name, count, mero_day, mero_time):
    try:
        duration = int(message.text)
        if check_if_can_add_mero_in_db(db, mero_day, mero_time, duration):
            add_event(message, name, count, mero_day, mero_time, duration)
        else:
            bot.send_message(message.chat.id, '–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å–ø–∏—Å–∫–æ–º '
                                              '–±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞. ', reply_markup=back)
    except ValueError:
        bot.send_message(message.chat.id, '–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö. ', reply_markup=back)
        bot.register_next_step_handler(message, event_duration, name, count, mero_day, mero_time)


def add_event(message, name, count, mero_day, mero_time, duration):
    db.del_events()
    db.add_event(name, count, mero_day, mero_time, duration)
    mero_day = list(map(int, mero_day.split('-')))
    key = telebot.types.InlineKeyboardMarkup()
    key.add(
        telebot.types.InlineKeyboardButton('–ü—Ä–∞–≤–∏–ª–∞ –∞—Ä–µ–Ω–¥—ã –ø–ª–æ—â–∞–¥–∫–∏', callback_data='show_rules'),
        telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help')
    )
    bot.send_message(message.chat.id, f"–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ '{name}' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–∞ "
                                      f"{datetime.date(*mero_day).strftime('%d/%m/%Y')} –≤ {mero_time}\n"
                                      f"–ù–µ–∑–∞–±—É–¥—å—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –∞—Ä–µ–Ω–¥—ã –ø–ª–æ—â–∞–¥–∫–∏ üëá",
                     reply_markup=key)


def number_to_emoji(number):
    # 0Ô∏è‚É£1Ô∏è‚É£2Ô∏è‚É£3Ô∏è‚É£4Ô∏è‚É£5Ô∏è‚É£6Ô∏è‚É£7Ô∏è‚É£8Ô∏è‚É£9Ô∏è‚É£
    numbers_icons = {
        0: '0Ô∏è‚É£',
        1: '1Ô∏è‚É£',
        2: '2Ô∏è‚É£',
        3: '3Ô∏è‚É£',
        4: '4Ô∏è‚É£',
        5: '5Ô∏è‚É£',
        6: '6Ô∏è‚É£',
        7: '7Ô∏è‚É£',
        8: '8Ô∏è‚É£',
        9: '9Ô∏è‚É£',
    }
    new_number = ''.join([numbers_icons[int(i)] for i in str(number)])
    return new_number


def show_events(message):
    db.del_events()
    text = ''
    events = db.show_events()
    i = 0
    a = sorted(events, key=lambda e: (int(e[3].split('-')[0]), int(e[3].split('-')[1]), int(e[3].split('-')[2])))
    for event in a:
        i += 1
        day = list(map(int, event[3].split('-')))
        text += number_to_emoji(i)
        text += f' {event[1]}'
        text += f"\n   {datetime.date(*day).strftime('%d/%m/%Y')} –≤ {event[-1]}\n"
        text += f"   –û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {event[2]}\n"
        text += '\n'
    if not text:
        text = '–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç('
    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back)


def del_event(message):
    db.del_events()
    events = db.show_events()
    event_key = telebot.types.InlineKeyboardMarkup()
    if not events:
        bot.edit_message_text('–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç( ', message.chat.id, message.message_id, reply_markup=back)
    else:
        for event in events:
            event_key.add(telebot.types.InlineKeyboardButton(event[1],
                                                             callback_data=f"del_event_{event[0]}"))
        event_key.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))
        bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', message.chat.id, message.message_id, reply_markup=event_key)


def del_event_from_db(message, event_id):
    db.del_events()
    db.del_event(event_id)
    bot.edit_message_text('–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ.', message.chat.id, message.message_id, reply_markup=back)


def registration_event(message):
    db.del_events()
    events = db.show_events()
    event_key = telebot.types.InlineKeyboardMarkup()
    if not events:
        bot.edit_message_text('–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç( ', message.chat.id, message.message_id, reply_markup=back)
    else:
        for event in events:
            event_key.add(telebot.types.InlineKeyboardButton(event[1],
                                                             callback_data=f"add_registration_{event[0]}_"
                                                                           f"{message.chat.id}"))
        event_key.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))
        bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', message.chat.id, message.message_id, reply_markup=event_key)


def add_registration(message, event_id, telegram_id):
    db.del_events()
    if db.get_number_of_available_seats(event_id):
        if db.if_registration(event_id, telegram_id):
            bot.edit_message_text('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ! ü•≥', message.chat.id, message.message_id,
                                  reply_markup=back)
            db.add_registration(event_id, telegram_id)
        else:
            bot.edit_message_text('–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —ç—Ç–æ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–µ', message.chat.id, message.message_id,
                                  reply_markup=back)
    else:
        bot.edit_message_text('–ú–µ—Å—Ç–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å(', message.chat.id, message.message_id, reply_markup=back)


def show_guests(message):
    db.del_events()
    events = db.show_events()
    event_key = telebot.types.InlineKeyboardMarkup()
    if not events:
        bot.edit_message_text('–ë–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –Ω–µ—Ç( ', message.chat.id, message.message_id, reply_markup=back)
    else:
        for event in events:
            event_key.add(telebot.types.InlineKeyboardButton(event[1],
                                                             callback_data=f"show_guests_for_event_{event[0]}"))
        event_key.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))
        bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', message.chat.id, message.message_id, reply_markup=event_key)


def show_guests_for_event(message, event_id):
    guests = db.get_guests(event_id)
    text = ''
    count = 0
    for person in guests:
        count += 1
        text += f"{count}) {person[1]} {person[2]} –≥—Ä—É–ø–ø–∞ {person[3]}\n"
    if text:
        bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back)
    else:
        bot.edit_message_text('–ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞–ø–∏—Å–∞–ª—Å—è(', message.chat.id, message.message_id, reply_markup=back)


def show_my_registrations(message):
    db.del_events()
    text = ''
    events = db.get_my_registrations(message.chat.id)
    for event in events:
        day = list(map(int, event[3].split('-')))
        text += f"{datetime.date(*day).strftime('%d/%m/%Y')} '{event[1]}' –Ω–∞—á–∞–ª–æ –≤ {event[-1]}\n"
        text += f"–û—Å—Ç–∞–ª–æ—Å—å –º–µ—Å—Ç: {event[2]}\n"
        text += '-' * 100
        text += '\n'
    if not text:
        text = '–í—ã –µ—â—ë –Ω–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∏ –Ω–∞ –æ–¥–Ω–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ('
    bot.edit_message_text(text, message.chat.id, message.message_id, reply_markup=back)


def unsubscribe(message):
    text = ''
    events = db.get_my_registrations(message.chat.id)
    event_key = telebot.types.InlineKeyboardMarkup()
    for event in events:
        event_key.add(telebot.types.InlineKeyboardButton(event[1],
                                                         callback_data=f"del_registration_{event[0]}_"
                                                                       f"{message.chat.id}"))
    event_key.add(telebot.types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='help'))
    bot.edit_message_text('–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: ', message.chat.id, message.message_id, reply_markup=event_key)


def unsubscribe_validate(message, event_id, telegram_id):
    db.unsubsribe_from_even(event_id, telegram_id)
    bot.edit_message_text('–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', message.chat.id, message.message_id, reply_markup=back)


@bot.callback_query_handler(func=lambda call: True)
def all_call(call):
    if call.message:
        if call.data == 'help':
            help_command(call.message)
        if call.data == 'new_event':
            new_event(call.message)
        if call.data == 'registration_event':
            registration_event(call.message)
        if call.data == 'show_events':
            show_events(call.message)
        if call.data == 'show_rules':
            show_rules(call.message)
        if call.data == 'add_admin':
            add_admin(call.message)
        if call.data == 'show_my_registrations':
            show_my_registrations(call.message)
        if call.data == 'show_guests':
            show_guests(call.message)
        if call.data == 'unsubscribe':
            unsubscribe(call.message)
        if call.data == 'del_event':
            del_event(call.message)
        if 'del_event_' in call.data:
            del_event_from_db(call.message, int(call.data.split('_')[-1]))
        if 'del_registration_' in call.data:
            a = call.data.split('_')
            unsubscribe_validate(call.message, int(a[-2]), int(a[-1]))
        if 'add_registration_' in call.data:
            a = call.data.split('_')
            add_registration(call.message, int(a[-2]), int(a[-1]))
        if 'show_guests_for_event_' in call.data:
            show_guests_for_event(call.message, int(call.data.split('_')[-1]))


@app.route('/', methods=['POST'])
def webhook():
    if flask.request.headers.get('content-type') == 'application/json':
        json_string = flask.request.get_data().decode('utf-8')
        update = telebot.types.Update.de_json(json_string)
        bot.process_new_updates([update])
        return ''
    else:
        flask.abort(403)


if __name__ == '__main__':
    db = DbHelper()
    bot.remove_webhook()
    time.sleep(1)
    bot.set_webhook(url=WEB_HOOK_URL)
    app.run(host=APP_HOST, port=APP_PORT)
